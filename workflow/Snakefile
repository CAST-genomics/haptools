import warnings
from pathlib import Path
import snakemake.io as io
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("6.5.3")


# IMPORT CONFIG VARIABLES
configfile: "config/config.yml"

def check_config(value, default=False, place=config):
    """ return true if config value exists and is true """
    return place[value] if (value in place and place[value]) else default

# handle defaults
config['out'] = check_config('out', 'out')
config['superpop'] = check_config('superpop', 'EUR')
config['min_maf'] = check_config('min_maf', 0)
# remove any trailing slashes in directories and set the variables
out = str(Path(config['out']))
logs = out+"/logs"
bench = out+"/bench"
# parse loci
loci = {loc['locus'].replace(':', '_'):loc for loc in config['loci']}

def get_vcf_chrs(vcf_path):
    """ return a dict of VCFs split by contig """
    if io.contains_wildcard(vcf_path):
        return glob_wildcards(vcf_path).chr
    return []

chrs = get_vcf_chrs(config['ref_panel'])



rule all:
    input:
        expand(
            out+"/{locus}/gt_matrix.tsv.gz", locus=loci.keys()
        )

rule vcf2gt:
    """ convert a VCF into a genotype matrix (cols are vars and rows are samples) """
    input:
        vcf = config['ref_panel'],
        vcf_idx = config['ref_panel']+".tbi",
        samps = config['samples'],
    params:
        popn = config['superpop'],
        locus = lambda wildcards: loci[wildcards.chr+"_"+wildcards.locus]['locus'],
        maf = config['min_maf']
    output:
        matrix = out+"/{chr}_{locus}/matrix.tsv.gz"
    log: logs+"/{chr}_{locus}/vcf2gt"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/gt_matrix.bash {params.popn} {params.maf} '{params.locus}' "
        "{input.vcf} {input.samps} 2>{log} | gzip > {output.matrix}"

rule str2gt:
    """ sum the difference of each allele length from the reference allele length """
    input:
        matrix = rules.vcf2gt.output
    output:
        matrix = out+"/{chr}_{locus}/gt_matrix.tsv.gz"
    log: logs+"/{chr}_{locus}/str2gt"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/str_gt.py -o {output.matrix} {input.matrix} 2>{log}"

rule phens:
    """ generate phenotypes from the genotype matrix """
    input:
        matrix = rules.str2gt.output
    output:
        phenotypes = out+"/{chr}_{locus}/phens.tsv.gz"
    log: logs+"/{chr}_{locus}/phens"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/generate_phenotypes.py -o {output.phenotypes} {input.matrix}"

import warnings
from pathlib import Path
import snakemake.io as io
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("6.5.3")


# IMPORT CONFIG VARIABLES
configfile: "config/config.yml"

def check_config(value, default=False, place=config):
    """ return true if config value exists and is true """
    return place[value] if (value in place and place[value]) else default

# handle defaults
config['out'] = check_config('out', 'out')
config['superpop'] = check_config('superpop', 'EUR')
config['min_maf'] = check_config('min_maf', 0)
config['mode'] = check_config('mode', 'snp')
config['beta'] = check_config('beta', 0.1)
# remove any trailing slashes in directories and set the variables
out = str(Path(config['out']))
logs = out+"/logs"
bench = out+"/bench"
# parse loci
loci = {loc['locus'].replace(':', '_'):loc for loc in config['loci']}
# ensure this is a list of floats, not a single float!
if not isinstance(config['beta'], list):
    config['beta'] = [config['beta']]

def get_vcf_chrs(vcf_path):
    """ return a dict of VCFs split by contig """
    if io.contains_wildcard(vcf_path):
        return glob_wildcards(vcf_path).chr
    return []

chrs = get_vcf_chrs(config['ref_panel'])



rule all:
    input:
        expand(
            out+"/{locus}/sim{beta}_"+config['mode']+"/susieR/finemap.pdf", locus=loci.keys(), beta=config['beta']
        )

rule vcf2gt:
    """ convert a VCF into a genotype matrix (cols are vars and rows are samples) """
    input:
        vcf = config['ref_panel'],
        vcf_idx = config['ref_panel']+".tbi",
        samps = config['samples'],
    params:
        popn = config['superpop'],
        locus = lambda wildcards: loci[wildcards.chr+"_"+wildcards.locus]['locus'],
        maf = config['min_maf']
    output:
        matrix = out+"/{chr}_{locus}/matrix.tsv.gz"
    log: logs+"/{chr}_{locus}/vcf2gt"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/gt_matrix.bash {params.popn} {params.maf} '{params.locus}' "
        "{input.vcf} {input.samps} 2>{log} | gzip > {output.matrix}"

rule str2gt:
    """ sum the difference of each allele length from the reference allele length """
    input:
        matrix = out+"/{locus}/matrix.tsv.gz"
    output:
        matrix = out+"/{locus}/gt_matrix.tsv.gz"
    log: logs+"/{locus}/str2gt"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/str_gt.py -o {output.matrix} {input.matrix} 2>{log}"

def phen_loc(wildcards):
    if config['mode'] == 'snp':
        return '--max-vars 1'
    else:
        return '--str-loc '+loci[wildcards.locus]['str'].split(':')[1]

rule phens:
    """ generate phenotypes from the genotype matrix """
    input:
        matrix = rules.str2gt.output
    params:
        loc = phen_loc,
        beta = lambda wildcards: wildcards.beta
    output:
        phenotypes = out+"/{locus}/sim{beta}_"+config['mode']+"/phens.tsv.gz"
    log: logs+"/{locus}/{beta}/"+config['mode']+"/phens"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/generate_phenotypes.py -o {output.phenotypes} "
        "--beta-"+config['mode']+" {params.beta} {params.loc} -- {input.matrix} &>{log}"

run_methods_out = out+"/{locus}/sim{beta}_"+config['mode']+"/susieR"
rule run_methods:
    """
        run the methods FINEMAP and SuSie
        and generate plots with results
    """
    input:
        gt = rules.phens.input,
        phen = rules.phens.output
    params:
        outdir = run_methods_out
    output:
        sumstats = temp(run_methods_out+"/sumstats.rds"),
        finemap = run_methods_out+"/finemap.rds",
        susie = run_methods_out+"/susie.rds",
        finemap_pdf = run_methods_out+"/finemap.pdf",
        susie_pdf = run_methods_out+"/susie.pdf",
        susie_eff_pdf = temp(run_methods_out+"/susie_eff.pdf")
    log: logs+"/{locus}/{beta}/"+config['mode']+"/methods"
    conda: "envs/susie.yml"
    shell:
        "workflow/scripts/finemapping_methods.R {input} {params.outdir} &>{log}"

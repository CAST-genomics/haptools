import warnings
from pathlib import Path
import snakemake.io as io
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("6.5.3")


# IMPORT CONFIG VARIABLES
configfile: "config/config.yml"

def check_config(value, default=False, place=config):
    """ return true if config value exists and is true """
    return place[value] if (value in place and place[value]) else default

# handle defaults
config['out'] = check_config('out', 'out')
config['superpop'] = check_config('superpop', 'EUR')
config['min_maf'] = check_config('min_maf', 0)
# remove any trailing slashes in directories and set the variables
out = str(Path(config['out']))
logs = out+"/logs"
bench = out+"/bench"

def get_vcf_chrs(vcf_path):
    """ return a dict of VCFs split by contig """
    if io.contains_wildcard(vcf_path):
        return glob_wildcards(vcf_path).chr
    return []

chrs = get_vcf_chrs(config['snp_vcf'])



rule all:
    input:
        expand(
            out+"/{locus}/{var}_matrix.tsv.gz", var=['snp'],
            locus=[loc.replace(':', '_') for loc in config['loci']]
        )

rule vcf2gt:
    """ convert a VCF into a genotype matrix (cols are SNPs and rows are samples) """
    input:
        vcf = lambda wildcards: config[wildcards.var+'_vcf'],
        samps = config['samples']
    params:
        popn = config['superpop'],
        locus = lambda wildcards: wildcards.chr+":"+wildcards.locus,
        maf = config['min_maf']
    output:
        matrix = out+"/{chr}_{locus}/{var}_matrix.tsv.gz"
    log: logs+"/{chr}_{locus}/{var}/vcf2gt"
    conda: "envs/default.yml"
    shell:
        "workflow/scripts/make_gt_matrix.bash {params.popn} {params.maf} '{params.locus}' "
        "{input.vcf} {input.samps} 2>{log} | gzip > {output.matrix}"

# rule 
